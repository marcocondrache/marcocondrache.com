[
  {
    "slug": "hooks-getters",
    "date": "2024-07-13T22:00:00.000Z",
    "title": "A react pattern for writting hooks",
    "summary": "Pattern that ensures efficient rendering by re-rendering components only when the specific state values they use change",
    "content": "<p>In my journey with React, I've come across a powerful pattern known as the hook getter pattern. This approach, utilized by popular libraries like <a href=\"https://github.com/vercel/swr/blob/1585a3e37d90ad0df8097b099db38f1afb43c95d/src/core/use-swr.ts#L733\" target=\"_blank\">SWR</a> and <a href=\"https://github.com/react-hook-form/react-hook-form/blob/5e92c1b5634bbcf18e3df14d173bced620f7392d/src/logic/getProxyFormState.ts#L16\" target=\"_blank\">react-hook-form</a>, embodies a fundamental React principle: render only what changes.</p>\n<p>Let's explore this pattern by evolving a simple localStorage wrapper into a more sophisticated hook.\nWe'll start with a basic implementation:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Lambda Studio — Blackout\" style=\"--shiki-dark:#fff;--shiki-light:#000;--shiki-dark-bg:#000;--shiki-light-bg:#f5f5f4\" tabindex=\"0\" data-language=\"ts\" data-theme=\"Lambda Studio — Blackout Light\"><code data-language=\"ts\" data-theme=\"Lambda Studio — Blackout Light\" style=\"display: grid;\"><span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">function</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\"> useLocalStorage</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">()</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  return</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\">    get</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">:</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> (</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">)</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =></span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> window</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">localStorage</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">getItem</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">),</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\">    set</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">:</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> (</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">,</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> value</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">)</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =></span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> window</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">localStorage</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">setItem</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">,</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> value</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">),</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  };</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}</span></span></code></pre></figure>\n<p>While functional, this hook doesn't leverage React's re-rendering capabilities. How can we make it re-render components when specific localStorage values change?\nThe answer lies in using Proxy and React refs.</p>\n<h4>Core idea</h4>\n<ul>\n<li>Maintain state outside of React's render cycle</li>\n<li>Use a proxy to detect which keys are accessed</li>\n<li>Listen for storage events to identify changes</li>\n</ul>\n<p>Our goal is to create a hook that allows for elegant usage like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Lambda Studio — Blackout\" style=\"--shiki-dark:#fff;--shiki-light:#000;--shiki-dark-bg:#000;--shiki-light-bg:#f5f5f4\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"Lambda Studio — Blackout Light\"><code data-language=\"tsx\" data-theme=\"Lambda Studio — Blackout Light\" style=\"display: grid;\"><span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">function</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\"> ThemeProvider</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">({</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> children </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">})</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  const</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> theme </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> useLocalStorage</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  return</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> &#x3C;</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">div style</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">={{</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> \"--theme\"</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">:</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> theme </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}}>{</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">children</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}&#x3C;/</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">div</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">>;</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}</span></span></code></pre></figure>\n<p>Let's build our enhanced hook step by step:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre class=\"Lambda Studio — Blackout\" style=\"--shiki-dark:#fff;--shiki-light:#000;--shiki-dark-bg:#000;--shiki-light-bg:#f5f5f4\" tabindex=\"0\" data-language=\"ts\" data-theme=\"Lambda Studio — Blackout Light\"><code data-language=\"ts\" data-theme=\"Lambda Studio — Blackout Light\" style=\"display: grid;\"><span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">function</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\"> useLocalStorage</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">()</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  const</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> render </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">=</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> useState</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">()[1];</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  const</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> state </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">=</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> useRef</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">({});</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  const</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> deps </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">=</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> useRef</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">({});</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">  useLayoutEffect</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(()</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =></span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">    window</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">addEventListener</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">\"storage\"</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">,</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> (</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">event</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">)</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =></span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">      if</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> (</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">event</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">storageArea </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">===</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> localStorage </span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">&#x26;&#x26;</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> deps</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">current</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">[</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">event</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">])</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">        state</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">current</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">[</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">event</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">key</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">]</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> event</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">newValue</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">;</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">        render</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">({});</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">      }</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">    });</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  },</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> []);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  return</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> useMemo</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">    ()</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =></span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">      new</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> Proxy</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">        {},</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">        {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000;--shiki-dark-font-weight:bold;--shiki-light-font-weight:bold\">          get</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">(</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">_</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">,</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> property</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">)</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> {</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">            deps</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">current</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">[</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">property</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">]</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> =</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\"> true;</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">            return</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\"> state</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">.</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">current</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">[</span><span style=\"--shiki-dark:#FFF;--shiki-light:#000\">property</span><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">];</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">          },</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">        }</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">      ),</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">    []</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">  );</span></span>\n<span data-line=\"\"><span style=\"--shiki-dark:#FFF8;--shiki-light:#0008\">}</span></span></code></pre></figure>\n<p>Let's break down the key components:</p>\n<ol>\n<li><code>state</code> stores our values, synced with localStorage.</li>\n<li><code>deps</code> tracks which values are currently in use.</li>\n<li><code>render</code> is a function to trigger a React re-render.</li>\n<li>We use a memoized <code>Proxy</code> to detect property access and mark dependencies.</li>\n<li>A <code>useLayoutEffect</code> sets up a listener for storage events, updating state and triggering re-renders only for tracked properties.</li>\n</ol>\n<p>This implementation creates an efficient state synchronization mechanism. When you destructure properties from the hook's return value, it automatically listens for changes in localStorage for those specific keys.</p>\n<p>By leveraging this pattern, you ensure that your components only re-render when the specific data they use changes, leading to more efficient and responsive React applications.</p>\n<h3>Key Principles</h3>\n<p>To summarize, the hook getter pattern generally follows these principles:</p>\n<ul>\n<li>Keep state outside of the render cycle</li>\n<li>Synchronize state, update tracked dependencies, and trigger renders</li>\n<li>Return getters for known properties or use a Proxy</li>\n</ul>\n<p>These principles allow for fine-grained control over when and why your components re-render, helping to optimize performance in React applications.</p>",
    "metadata": {
      "readingTime": 1,
      "wordCount": 388
    },
    "published": true
  },
  {
    "slug": "hooks-gettersfff",
    "date": "2024-07-13T22:00:00.000Z",
    "title": "A react pattern for writting hooks",
    "summary": "Pattern that ensures efficient rendering by re-rendering components only when the specific state values they use change",
    "content": "",
    "metadata": {
      "readingTime": 0,
      "wordCount": 0
    },
    "published": true
  }
]
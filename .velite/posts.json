[
  {
    "slug": "hooks-getters",
    "title": "A react pattern for writting hooks",
    "content": "<p>One thing that I've learned during my experience with React is the hook getters pattern.</p>\n<p>It's a pattern used by libraries like <a href=\"https://github.com/vercel/swr/blob/1585a3e37d90ad0df8097b099db38f1afb43c95d/src/core/use-swr.ts#L733\" target=\"_blank\">swr</a> and <a href=\"https://github.com/react-hook-form/react-hook-form/blob/5e92c1b5634bbcf18e3df14d173bced620f7392d/src/logic/getProxyFormState.ts#L16\" target=\"_blank\">react-hook-form</a>, and it states a basic idea of React. Don't render what is not used.</p>\n<p>Take this example</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#151515;color:#bbbbbb\" tabindex=\"0\" data-language=\"ts\" data-theme=\"CodeSandbox\"><code data-language=\"ts\" data-theme=\"CodeSandbox\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#A390FF\">function</span><span style=\"color:#CDF861\"> useLocalStorage</span><span style=\"color:#86897A\">()</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  return</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CDF861\">    get</span><span style=\"color:#86897A\">:</span><span style=\"color:#86897A\"> (</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#86897A\">)</span><span style=\"color:#B3E8B4\"> =></span><span style=\"color:#FFFFFF\"> window</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">localStorage</span><span style=\"color:#86897A\">.</span><span style=\"color:#CDF861\">getItem</span><span style=\"color:#86897A\">(</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#86897A\">),</span></span>\n<span data-line=\"\"><span style=\"color:#CDF861\">    set</span><span style=\"color:#86897A\">:</span><span style=\"color:#86897A\"> (</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#86897A\">,</span><span style=\"color:#FFFFFF\"> value</span><span style=\"color:#86897A\">)</span><span style=\"color:#B3E8B4\"> =></span><span style=\"color:#FFFFFF\"> window</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">localStorage</span><span style=\"color:#86897A\">.</span><span style=\"color:#CDF861\">setItem</span><span style=\"color:#86897A\">(</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#86897A\">,</span><span style=\"color:#FFFFFF\"> value</span><span style=\"color:#86897A\">),</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">  }</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">}</span></span></code></pre></figure>\n<p>This is just a basic wrapper on window's localStorage functions. Can we make something more advanced?</p>\n<p>How can we subscribe to re-render everytime the value of a key changes?</p>\n<p>We can use <code>Proxy</code> and some React refs.</p>\n<h3>Implementation</h3>\n<p>This is the main idea:</p>\n<ul>\n<li>Keep state outside of render state</li>\n<li>Return a proxy to detect which keys are used</li>\n<li>Listen to storage events to detect changes</li>\n</ul>\n<p>What we want to achieve is something like this</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#151515;color:#bbbbbb\" tabindex=\"0\" data-language=\"tsx\" data-theme=\"CodeSandbox\"><code data-language=\"tsx\" data-theme=\"CodeSandbox\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#A390FF\">function</span><span style=\"color:#CDF861\"> ThemeProvider</span><span style=\"color:#86897A\">(</span><span style=\"color:#BBBBBB\">{ </span><span style=\"color:#FFFFFF\">children</span><span style=\"color:#BBBBBB\"> }</span><span style=\"color:#86897A\">)</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#BBBBBB\"> { </span><span style=\"color:#FFFFFF\">theme</span><span style=\"color:#BBBBBB\"> } </span><span style=\"color:#B3E8B4\">=</span><span style=\"color:#CDF861\"> useLocalStorage</span><span style=\"color:#86897A\">()</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  return</span><span style=\"color:#86897A\"> &#x3C;</span><span style=\"color:#A390FF\">div</span><span style=\"color:#CABEFF\"> style</span><span style=\"color:#B3E8B4\">=</span><span style=\"color:#86897A\">{{</span><span style=\"color:#B3E8B4\"> \"</span><span style=\"color:#BFD084\">--theme</span><span style=\"color:#B3E8B4\">\"</span><span style=\"color:#86897A\">:</span><span style=\"color:#FFFFFF\"> theme</span><span style=\"color:#86897A\"> }}>{</span><span style=\"color:#FFFFFF\">children</span><span style=\"color:#86897A\">}&#x3C;/</span><span style=\"color:#A390FF\">div</span><span style=\"color:#86897A\">></span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">}</span></span></code></pre></figure>\n<p>Let's create our hook</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#151515;color:#bbbbbb\" tabindex=\"0\" data-language=\"ts\" data-theme=\"CodeSandbox\"><code data-language=\"ts\" data-theme=\"CodeSandbox\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#A390FF\">function</span><span style=\"color:#CDF861\"> useLocalStorage</span><span style=\"color:#86897A\">()</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> render</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useState</span><span style=\"color:#86897A\">()</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#7AD9FB\">1</span><span style=\"color:#BBBBBB\">];</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> state</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> deps</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#6F6F6F\">  /* ... */</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">}</span></span></code></pre></figure>\n<p><code>state</code> will keep our values (syncronized with the storage), <code>deps</code> will track which values we are currently using and <code>render</code> is a function to force a react re-render.</p>\n<p>Now, let's use a proxy to understand which props we are using.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#151515;color:#bbbbbb\" tabindex=\"0\" data-language=\"ts\" data-theme=\"CodeSandbox\"><code data-language=\"ts\" data-theme=\"CodeSandbox\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#A390FF\">function</span><span style=\"color:#CDF861\"> useLocalStorage</span><span style=\"color:#86897A\">()</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> render</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useState</span><span style=\"color:#86897A\">()</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#7AD9FB\">1</span><span style=\"color:#BBBBBB\">];</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> state</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> deps</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  return</span><span style=\"color:#CDF861\"> useMemo</span><span style=\"color:#86897A\">(</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">    ()</span><span style=\"color:#B3E8B4\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#B3E8B4\">      new</span><span style=\"color:#CDF861\"> Proxy</span><span style=\"color:#86897A\">(</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        {},</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CDF861\">          get</span><span style=\"color:#86897A\">(</span><span style=\"color:#FFFFFF\">_</span><span style=\"color:#86897A\">,</span><span style=\"color:#FFFFFF\"> property</span><span style=\"color:#86897A\">)</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFFFFF\">            deps</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">property</span><span style=\"color:#BBBBBB\">] </span><span style=\"color:#B3E8B4\">=</span><span style=\"color:#7AD9FB\"> true</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">            return</span><span style=\"color:#FFFFFF\"> state</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">property</span><span style=\"color:#BBBBBB\">];</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">          },</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">      ),</span></span>\n<span data-line=\"\"><span style=\"color:#BBBBBB\">    []</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">  )</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">}</span></span></code></pre></figure>\n<p>Note how our proxy is memoized. We don't need to recreate it every time. The getter will define which properties we are listening to!</p>\n<p>Let's add now the listener.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#151515;color:#bbbbbb\" tabindex=\"0\" data-language=\"ts\" data-theme=\"CodeSandbox\"><code data-language=\"ts\" data-theme=\"CodeSandbox\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#A390FF\">function</span><span style=\"color:#CDF861\"> useLocalStorage</span><span style=\"color:#86897A\">()</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> render</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useState</span><span style=\"color:#86897A\">()</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#7AD9FB\">1</span><span style=\"color:#BBBBBB\">];</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> state</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  const</span><span style=\"color:#FFFFFF\"> deps</span><span style=\"color:#B3E8B4\"> =</span><span style=\"color:#CDF861\"> useRef</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#CDF861\">  useLayoutEffect</span><span style=\"color:#86897A\">(()</span><span style=\"color:#B3E8B4\"> =></span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFFFFF\">    window</span><span style=\"color:#86897A\">.</span><span style=\"color:#CDF861\">addEventListener</span><span style=\"color:#86897A\">(</span><span style=\"color:#B3E8B4\">\"</span><span style=\"color:#BFD084\">storage</span><span style=\"color:#B3E8B4\">\"</span><span style=\"color:#86897A\">,</span><span style=\"color:#86897A\"> (</span><span style=\"color:#FFFFFF\">event</span><span style=\"color:#86897A\">)</span><span style=\"color:#B3E8B4\"> =></span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">      if</span><span style=\"color:#86897A\"> (</span><span style=\"color:#FFFFFF\">event</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">storageArea</span><span style=\"color:#B3E8B4\"> ===</span><span style=\"color:#FFFFFF\"> localStorage</span><span style=\"color:#B3E8B4\"> &#x26;&#x26;</span><span style=\"color:#FFFFFF\"> deps</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">event</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#BBBBBB\">]</span><span style=\"color:#86897A\">)</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFFFFF\">        state</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">event</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">key</span><span style=\"color:#BBBBBB\">] </span><span style=\"color:#B3E8B4\">=</span><span style=\"color:#FFFFFF\"> event</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">newValue</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CDF861\">        render</span><span style=\"color:#86897A\">({})</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">    })</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">  },</span><span style=\"color:#BBBBBB\"> []</span><span style=\"color:#86897A\">)</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#A390FF\">  return</span><span style=\"color:#CDF861\"> useMemo</span><span style=\"color:#86897A\">(</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">    ()</span><span style=\"color:#B3E8B4\"> =></span></span>\n<span data-line=\"\"><span style=\"color:#B3E8B4\">      new</span><span style=\"color:#CDF861\"> Proxy</span><span style=\"color:#86897A\">(</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        {},</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#CDF861\">          get</span><span style=\"color:#86897A\">(</span><span style=\"color:#FFFFFF\">_</span><span style=\"color:#86897A\">,</span><span style=\"color:#FFFFFF\"> property</span><span style=\"color:#86897A\">)</span><span style=\"color:#86897A\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFFFFF\">            deps</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">property</span><span style=\"color:#BBBBBB\">] </span><span style=\"color:#B3E8B4\">=</span><span style=\"color:#7AD9FB\"> true</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#A390FF\">            return</span><span style=\"color:#FFFFFF\"> state</span><span style=\"color:#86897A\">.</span><span style=\"color:#FFFFFF\">current</span><span style=\"color:#BBBBBB\">[</span><span style=\"color:#FFFFFF\">property</span><span style=\"color:#BBBBBB\">];</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">          },</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">      ),</span></span>\n<span data-line=\"\"><span style=\"color:#BBBBBB\">    []</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">  )</span><span style=\"color:#BBBBBB\">;</span></span>\n<span data-line=\"\"><span style=\"color:#86897A\">}</span></span></code></pre></figure>\n<p>For each storage event, we will update the state only for those that are actually used by the hook and trigger the render after the update.</p>\n<p>And that's it! For each destructured property we will listen for changes inside localStorage. Creating a nice and safe state syncronization.</p>\n<p>This is still a basic example, this pattern can be applied to more complex states and cases.</p>\n<hr>\n<ol>\n<li>Some of the code takes inspiration from the external store of React (<a href=\"https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js\">link</a>)</li>\n</ol>",
    "excerpt": "One thing that I've learned during my experience with React is the hook getters pattern.\nIt's a pattern used by libraries like swr and react-hook-form, and it states a basic idea of React. Don't render what is not used.\nTake this example\nfunction useLocalStora",
    "metadata": {
      "readingTime": 1,
      "wordCount": 381
    },
    "published": true
  }
]